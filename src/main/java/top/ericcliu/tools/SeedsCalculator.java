package top.ericcliu.tools;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.Multimap;
import com.google.common.collect.TreeMultimap;
import lombok.extern.log4j.Log4j2;
import top.ericcliu.ds.Seed;
import top.ericcliu.ds.SeedEdge;
import top.ericcliu.ds.SeedString;
import top.ericcliu.ds.TypeRelatedGraph;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

/**
 * @author liubi
 */
@Log4j2
public class SeedsCalculator {
    private static Set<Integer> subMetaData = new HashSet<>();
    private static Set<Integer> predMetaData = new HashSet<>();
    private static Set<Integer> objMetaData = new HashSet<>();
    private static Set<Integer> metaData = new HashSet<>();
    private final static String DATA_BASE_PATH = "E:\\bioportal.sqlite";
    //private static String DATA_BASE_PATH = "/home/lbc/bioportal1.sqlite";
    private final static String OUT_PUT_FILE_NAME = "seeds_May_bioportal_sampled";
    //private static String DATA_BASE_PATH = "E:\\linkedmdb.sqlite";
    //private static String DATA_BASE_PATH = "/home/lbc/linkedmdb.sqlite";
    //private final static String OUT_PUT_FILE_NAME = "seeds_May_linkedMDB_sampled" ;
    private static Connection db = new DataBaseTools().sqliteConect(DATA_BASE_PATH);

    static {
        try {
            //Integer[] meta = new Integer[]{16559795, 16557526, 16555167, 16555146, 16553620, 16543267, 16543234, 16543213, 16543202, 16528215, 16523983, 16517407, 16489914, 15716560, 15681403, 14988176, 14981818, 14981812, 14972055, 14969499, 14969489, 14834384, 14834056, 14833839, 14833687, 14829473, 14826753, 14818741, 14818278, 14816547, 14732155, 14727538, 14718826, 14718689, 14718680, 13456829, 13369912, 13165204, 13165120, 13164619, 13164591, 13164574, 13164528, 13164484, 13164478, 13164474, 13164457, 13150744, 13150568, 13148003, 13144505, 13141362, 13140460, 13140238, 12947077, 12412060, 12402717, 12396657, 12394258, 12393404, 12393010, 12372261, 12372254, 12357266, 12356498, 12356487, 12330459, 12330447, 12330430, 12028033, 11065247, 11063998, 11061538, 11060822, 11060733, 11060120, 11060038, 11059980, 10996786, 10995877, 10995866, 10886888, 10886647, 10886639, 10833453, 10833235, 10833094, 10662872, 10660515, 10625058, 10575723, 10575464, 10575251, 10575117, 10575084, 10575007, 10575001, 10574974, 10574936, 10549834, 10541186, 10464585, 10464171, 10461339, 10461070, 10458925, 10458650, 10456879, 10456793, 10456307, 10455738, 10455239, 10455212, 10454845, 10454837, 10422322, 10411309, 9749077, 9693577, 9691751, 9685697, 9683212, 9681257, 9680965, 9380593, 9378337, 9375619, 9373526, 9372372, 9372062, 9370399, 9241017, 9148785, 9005328, 8991706, 8460022, 8353892, 8353493, 7926709, 7885112, 7883682, 7880705, 7880517, 7880026, 7878176, 7874442, 7874231, 7874192, 7874149, 7874059, 7874057, 7705805, 7693909, 7689085, 7687235, 7686868, 7685579, 7680770, 7675329, 7671787, 7671596, 7669549, 7669246, 7669174, 7668714, 7668318, 7668206, 7668060, 7667706, 7667676, 7667598, 7667481, 7667179, 7667169, 7666940, 7666902, 7666896, 7666854, 7666840, 7666831, 7549978, 7548458, 7542690, 7453641, 7453046, 7452910, 7451996, 7403590, 7403179, 7402962, 7402909, 7402864, 7402824, 7402819, 7402788, 7333806, 7332247, 7312566, 7312194, 7274305, 7139520, 7138830, 7138616, 7138430, 7061643, 6987057, 6913956, 6911232, 6909021, 6903686, 6897735, 6896452, 6895533, 6894549, 5705132, 5701124, 5696583, 5695307, 5694836, 5694802, 5694661, 5694605, 5682386, 5513107, 5512326, 5512288, 5512276, 5512267, 5472825, 5469151, 5463909, 4909478, 4903471, 4902704, 4900246, 4898910, 4896823, 4895708, 4895706, 4895552, 4889404, 4888516, 4888156, 4886053, 4885889, 4885499, 4884416, 4884401, 4881572, 4880475, 4880331, 4879273, 4879148, 4879068, 4879057, 4879044, 4879032, 4857696, 4856876, 4855244, 4854938, 4854208, 4850253, 4848903, 4848686, 4848385, 4848352, 1972392, 1518996, 1393652, 1379121, 1238081, 1180664, 1070387, 1024044, 865960, 827797, 821080, 642178, 601915, 372261, 363233, 354740, 345898, 345626, 340853, 338536, 338332, 337617, 337505, 335998, 335792, 335745, 335599, 335220, 335213, 335194, 335161, 335119, 335086, 335013, 335007, 334965, 334943, 334940, 334933, 331226, 331168, 321559, 321262, 321232, 321178, 320637, 320630, 258557, 257943, 257873, 254401, 234771, 230239, 181784, 181733, 181144, 180759, 180742, 180570, 180564, 180423, 144522, 143195, 140383, 139078, 138992, 138971, 47978, 47976, 37668, 37443, 37429, 37416, 37388, 37364, 37354, 37334, 10782, 10174, 10156, 10051, 10045, 10016, 10012, 9998, 8076, 6942, 6736, 6479, 6434, 3462, 2764};
            // bioportal_label_filtering.csv中的值
            Integer[] meta = new Integer[]{47298, 195600, 195604, 195606, 196262, 197491, 198777, 202026, 205140, 205185, 205312, 205566, 212169, 212397, 214256, 216329, 218079, 218180, 222374, 222778, 224494, 224497, 226348, 226737, 227566, 228889, 230615, 231261, 235277, 235614, 236404, 237660, 238044, 238598, 240289, 240298, 240421, 242481, 242547, 244691, 248174, 248299, 248326, 248675, 248954, 249055, 249306, 249470, 249808, 250056, 250463, 250692, 250789, 251751, 252097, 254467, 255312, 256299, 257339, 259972, 262518, 262556, 262661, 262870, 268393, 268609, 270357, 272286, 273916, 274015, 277972, 278352, 279946, 279949, 281659, 282028, 282815, 284070, 285712, 286315, 290255, 290589, 291375, 292618, 292999, 293547, 295215, 295224, 295347, 297382, 297448, 299573, 303021, 303145, 303172, 303516, 303791, 303891, 304138, 304301, 304635, 304881, 305286, 305513, 305608, 306564, 306907, 309205, 309960, 310947, 311987, 314620, 317166, 317204, 317309, 317518, 323041, 323257, 325005, 326934, 328564, 328663, 332620, 333000, 334594, 334597, 336307, 336676, 337463, 338718, 340360, 340963, 344903, 345237, 346023, 347266, 347647, 348195, 349863, 349872, 349995, 352030, 352096, 354221, 357669, 357793, 357820, 358164, 358439, 358539, 358786, 358949, 359283, 359529, 359934, 360161, 360256, 361212, 361555, 363853, 428845, 429238, 430169, 434544, 434697, 439788, 443474, 444424, 444611, 444848, 449032, 451417, 452485, 452491, 453837, 458578, 458808, 459340, 460715, 463642, 464035, 464966, 469341, 469494, 474585, 478271, 479221, 479408, 479645, 483829, 486214, 487282, 487288, 488634, 493375, 493605, 494137, 495512, 498439, 498832, 499763, 504138, 504291, 509382, 513068, 514018, 514205, 514442, 518626, 521011, 522079, 522085, 523431, 528172, 528402, 528934, 530309, 535167, 535547, 544725, 549302, 553966, 555856, 559176, 560975, 562282, 566826, 567154, 568501, 573277, 574965, 575653, 581736, 1061673, 1061674, 1061676, 1061708, 1061709, 1062804, 1062806, 1062840, 1062841, 1062845, 1062937, 1062938, 1065011, 1065012, 1065014, 1065649, 1065651, 1065653, 1066463, 1066464, 1069764, 1069765, 1069769, 1069771, 1113135, 1113139, 1113456, 1113473, 1115865, 1115867, 1121549, 1121551, 1134951, 1259738, 1259739, 1259929, 1259930, 1311850, 1311856, 1834369, 1834373, 1834374, 1834455, 1834456, 1846422, 1846426, 1846578, 1846579, 1846910, 1846913, 1850674, 1850675, 1850678, 1851456, 1851458, 1852740, 1852741, 1852751, 1852753, 1852754, 1852959, 1852960, 1852962, 1852964, 1853337, 1853339, 1854031, 1854034, 1854035, 1854641, 1854643, 1854646, 1856723, 1856725, 1858104, 2001987, 2001989, 2003513, 2003515, 2003517, 2003548, 2003551, 2003627, 2003629, 2006908, 2006910, 2007481, 2007482, 2046458, 2046459, 2046463, 2047306, 2047307, 2047311, 2047585, 2047586, 2047666, 2047668, 2058307, 2058310, 2058315, 2088837, 2088838, 2123422, 2123423, 2123427, 2175284, 2175285, 2198905, 2198906, 2283621, 2283623, 2291751, 2291752, 2293847, 2293942, 2296211, 2297333, 2298483, 2298923, 2299546, 2299982, 2300299, 2301400, 2301480, 2301810, 2302969, 2303378, 2305017, 2305400, 2305710, 2306021, 2306829, 2307582, 2307593, 2307626, 2307690, 2310491};
            // linkedMDB中meta数据
            //Integer[] meta = new Integer[]{16559795, 16557526, 16555167, 16555146, 16553620, 16543267, 16543234, 16543213, 16543202, 16528215, 16523983, 16517407, 16489914, 15716560, 15681403, 14988176, 14981818, 14981812, 14972055, 14969499, 14969489, 14834384, 14834056, 14833839, 14833687, 14829473, 14826753, 14818741, 14818278, 14816547, 14732155, 14727538, 14718826, 14718689, 14718680, 13456829, 13369912, 13165204, 13165120, 13164619, 13164591, 13164574, 13164528, 13164484, 13164478, 13164474, 13164457, 13150744, 13150568, 13148003, 13144505, 13141362, 13140460, 13140238, 12947077, 12412060, 12402717, 12396657, 12394258, 12393404, 12393010, 12372261, 12372254, 12357266, 12356498, 12356487, 12330459, 12330447, 12330430, 12028033, 11065247, 11063998, 11061538, 11060822, 11060733, 11060120, 11060038, 11059980, 10996786, 10995877, 10995866, 10886888, 10886647, 10886639, 10833453, 10833235, 10833094, 10662872, 10660515, 10625058, 10575723, 10575464, 10575251, 10575117, 10575084, 10575007, 10575001, 10574974, 10574936, 10549834, 10541186, 10464585, 10464171, 10461339, 10461070, 10458925, 10458650, 10456879, 10456793, 10456307, 10455738, 10455239, 10455212, 10454845, 10454837, 10422322, 10411309, 9749077, 9693577, 9691751, 9685697, 9683212, 9681257, 9680965, 9380593, 9378337, 9375619, 9373526, 9372372, 9372062, 9370399, 9241017, 9148785, 9005328, 8991706, 8460022, 8353892, 8353493, 7926709, 7885112, 7883682, 7880705, 7880517, 7880026, 7878176, 7874442, 7874231, 7874192, 7874149, 7874059, 7874057, 7705805, 7693909, 7689085, 7687235, 7686868, 7685579, 7680770, 7675329, 7671787, 7671596, 7669549, 7669246, 7669174, 7668714, 7668318, 7668206, 7668060, 7667706, 7667676, 7667598, 7667481, 7667179, 7667169, 7666940, 7666902, 7666896, 7666854, 7666840, 7666831, 7549978, 7548458, 7542690, 7453641, 7453046, 7452910, 7451996, 7403590, 7403179, 7402962, 7402909, 7402864, 7402824, 7402819, 7402788, 7333806, 7332247, 7312566, 7312194, 7274305, 7139520, 7138830, 7138616, 7138430, 7061643, 6987057, 6913956, 6911232, 6909021, 6903686, 6897735, 6896452, 6895533, 6894549, 5705132, 5701124, 5696583, 5695307, 5694836, 5694802, 5694661, 5694605, 5682386, 5513107, 5512326, 5512288, 5512276, 5512267, 5472825, 5469151, 5463909, 4909478, 4903471, 4902704, 4900246, 4898910, 4896823, 4895708, 4895706, 4895552, 4889404, 4888516, 4888156, 4886053, 4885889, 4885499, 4884416, 4884401, 4881572, 4880475, 4880331, 4879273, 4879148, 4879068, 4879057, 4879044, 4879032, 4857696, 4856876, 4855244, 4854938, 4854208, 4850253, 4848903, 4848686, 4848385, 4848352, 1972392, 1518996, 1393652, 1379121, 1238081, 1180664, 1070387, 1024044, 865960, 827797, 821080, 642178, 601915, 372261, 363233, 354740, 345898, 345626, 340853, 338536, 338332, 337617, 337505, 335998, 335792, 335745, 335599, 335220, 335213, 335194, 335161, 335119, 335086, 335013, 335007, 334965, 334943, 334940, 334933, 331226, 331168, 321559, 321262, 321232, 321178, 320637, 320630, 258557, 257943, 257873, 254401, 234771, 230239, 181784, 181733, 181144, 180759, 180742, 180570, 180564, 180423, 144522, 143195, 140383, 139078, 138992, 138971, 47978, 47976, 37668, 37443, 37429, 37416, 37388, 37364, 37354, 37334, 10782, 10174, 10156, 10051, 10045, 10016, 10012, 9998, 8076, 6942, 6736, 6479, 6434, 3462, 2764,281640,7001837,7091979,7097251,6982342,7024692,7405930,7404433,7411161,7425314,7420732,7417356,7406988,7412230,7426196,7421711,7407485,7425923,7426507,7412626,7422094,7424482,7423282,7419815,7408740,7411964,7410199,7415262,6998195,7046908,179096,7404321,178058,318908,6947834,319919,7421215,7425367,319233,1788009,7018564,9336158,9337648,7012746,7416283,7406445,7411694,7115310,180252,9201734,10392834,5426923,5273147,4984439,4988716,10442469,4889405,7547195,40054,7761133,139254,9225379,143525,15739243,8134827,7732241,10575724,4875150,10470148,10845345,141055,14977155,7711297,321164,320714,322324,180743,11063999,4919122,38669,10464586,16555582,10625540,865961,4865076,7764098,7732152,7766634,7674101,4859295,7710446,39100,4915032,5464380,5514078,9372373,5513601,7722441,1725109,4882129,7332248,6904514,10541525,6953282,4895709,5511649,9370228,5707373,5712421,4865054,7491833,7681024,1923372,7748305,7141848,12974322,7427034,4888157,7016806,7295394,7314557,39251,7354183,4906065,10560316,2970305,7417484,12357443,9775518,10576857,4909479,4900189,181748,39716,321851,7548805,321503,7564075,144791,4852923,1674032,7513018,322333,7422573,7770560,8025188,11061539,1180665,7424922,8946173,8008646,7702528,8000501,331169,7140692,3118639,7141825,13148191,9371892,12394259,14983769,2943428,7686264,9681425,5713905,3451142,11066271,9201735,14942505,5595855,5595864,4875401,5704409,7106846,6999069,9777498,181326,10459427,10463267,10455596,3209912,8022078,2347954,1824483,10468209,4918303,8258397,8338566,10467487,5513953,5512327,1660103,7703454,7765429,7750227,9241018,7714942,4914429,7703979,11017024,7409593,4904022,13142329,10575588,7031850,4896824,545738,10575073,1878684,1899371,8304057,10995963,10462425,10664738,7742480,14721089,10463766,4902705,9739384,7111482,10661103,14721144,985119,4886255,11015556,181969,14836141,1095544,11066908,4903929,7690837,11063170,11063106,4875136,180741,12357671,12359096,9383230,9373527,39211,12028156,821081,2534475,181145,7066724,7125385,14975141,4880476,4889692,7699813,7739457,12947078,13140347,1070388,4889233,9388492,10459631,5716252,9068331,9375878,12402718,14834230,1393653,181734,7140485,12434958,4857697,13150620,5513704,16556578,495486,14834385,13163219,5710126,5479455,1803030,7682204,2410740,13386096,4854209,13456830,8392248,1721949,4893378,11067041,14720130,1934011,10575292,4918397,14728647,14732425,13144506,4898911,8252779,4857210,585728,9375620,7745373,5703883,7694416,14835475,14821543,14824713,14827056,14826754,14831092,7422556,2464223,7416005,10457022,7319987,10472277,10575858,2401671,9681258,180760,1379122,12619820,10575552,7419604,13150235,14981076,14982113,11065248,15403266,39157,7719828,1676184,8997411,2459548,5719229,2588519,3497864,13053680,10846778,14874914,7452250,7682755,9749078,9777551,10849673,4896264,15683621,751666,7507669,4889143,10463368,10472116,5472826,642179,4903362,7922805,10576451,16524660,16517408,16537770,7110693,1865572,9201733,7926710,8198093,16489915,16543442,16543268,16543378,16543625,4895707,16555809,2469067,16557590,7690701,8263010,140391,10576910,37669,16566063,12087504,281639,4889404,7542690,37334,7671596,138971,9148785,143195,15716560,7880026,7667169,10575723,10456307,4848903,10833235,140383,233859,319711,320482,319974,320252,319369,14972055,320380,319899,7705805,320637,320630,321178,180742,11063998,4879068,328560,37429,10464585,16555167,10625058,865960,7667676,4848385,4846509,7669246,7668206,7671787,4848352,7666940,37364,4903471,5463909,9372372,5512267,5513107,7693909,601915,4879273,5527611,7332247,6903686,10541186,6913956,4895708,5694605,5694661,4855244,7453641,7666902,338332,7680770,7138430,12393010,7402864,4888156,6909021,7274305,37388,7312194,7333806,4879032,10549834,335161,7402788,12356487,9683212,10574974,4909478,4884401,180564,37416,321232,7548458,321262,7549978,7427049,144207,144522,4848686,335599,7453046,321559,7402824,7666840,7874059,11061538,1180664,7402819,8460022,7874149,7668318,7874057,7139520,331168,1024044,7138830,13148003,9370399,12394258,14981818,335194,7667706,9680965,5694836,334933,11060822,4850253,5694802,6895533,6894549,9691751,180423,10455212,10456879,10454845,372261,7880705,335086,1238081,10456793,4885499,7874442,7874231,10458650,5512288,5512326,7666831,7669174,7666896,9241017,338536,7669549,4879044,7675329,10996786,7403590,4900246,13141362,10574936,6911232,4896823,335792,10575007,335213,345898,7874192,10995877,10454837,10662872,7687235,14718680,10461339,4902704,9685697,6987057,10660515,14718826,334943,4884416,10995866,181784,14834384,11023387,11025518,11025070,363233,11060733,4895552,7668060,11060038,11060120,4856876,180570,11143558,11144930,11143717,11144504,11144912,11144265,11144849,11143409,11144090,11144526,12032762,12365784,12356498,12357266,9378337,9373526,37443,12028033,821080,334940,233555,181144,6896452,6897735,14969499,4880475,4879057,7685579,7667179,12947077,13140238,1070387,4879148,9380593,10455738,5705132,9372062,9005328,12402717,14833839,1393652,181733,13138659,7138616,12396657,4857696,13150568,5512276,16555146,335745,14834056,13150744,5695307,5469151,335220,7667481,827797,13369912,4854208,13456829,8353892,337505,4886053,11059980,14718689,1518996,10575117,4885889,14727538,14732155,13144505,4898910,7883682,4854938,335119,9375619,7686868,5696583,7668714,14833687,14816547,14818741,14818278,14826753,14829473,7403179,340853,7402962,10455239,7312566,10461070,10575251,335007,9681257,180759,1379121,12393404,10575001,7402909,13140460,14966254,14966514,14966099,14969489,14981812,11065247,14988176,37354,354740,8991706,345626,7689085,5701124,1972392,12412060,334965,10833453,7451996,7666854,9749077,9693577,10833094,4888516,15681403,335013,7452910,4881572,15691394,10458925,10464171,5472825,642178,4880331,7880517,10575464,16523983,16517407,16528215,7061643,9127743,337617,7926709,7878176,16489914,16543213,16543267,16543234,16543202,4895706,16553620,335998,16557526,7667598,7885112,138992,10575084,37668,16559795,318582,320481,209780,10886427,209620,209626,142714,142468,143048,142419,142625,142799,142438,142508,142596,143078,142845,142331,142375,142586,142963,142257,142507,142880,143034,142162,142412,142790,143131,142297,142420,142550,143069,142660,142830,142189,142317,142340,142241,142522,142444,142226,142495,142180,142413,142135,142403,142447,142775,142777,142531,142384,142751,142725,142921,143063,142197,142121,142647,142207,142516,143151,142947,142335,142569,142943,143087,142230,142679,142858,142328,143090,142391,142909,143112,142666,142840,142748,142939,142264,142253,142698,142163,142594,142765,142970,142517,143046,142394,142657,142826,143158,142564,142216,142237,142490,142867,143008,142396,142758,142960,142279,143122,142271,142711,142901,143030,142146,142813,142402,142477,143065,142395,142225,142476,142674,142851,143001,143174,142353,142952,142606,142407,142148,142131,142401,142842,142913,142193,143051,142195,142380,142536,142269,142314,142702,142903,142172,142547,143134,142735,142924,142209,142838,142998,143164,142360,142580,142544,142617,142293,142718,142654,142823,143170,142288,142686,143058,142888,142126,142397,142462,142274,142184,142722,142151,142362,142428,142807,143147,142436,142567,142672,142936,142671,142177,142185,143055,142663,142993,142254,142247,142285,142872,142761,142996,142282,143041,142819,143075,142327,142321,142860,142143,142358,142576,142769,142525,142895,143022,142139,142218,142433,142635,142308,142570,142449,142511,142886,143016,142424,143101,142320,142741,142932,142220,142459,142848,142298,142170,142417,142503,143037,142167,142415,142130,142198,142695,142558,142368,143072,142205,142833,142296,142956,142244,142691,142118,142383,142683,142593,142883,142600,142260,142682,143104,142981,143127,142926,142287,142688,142371,142533,142309,142133,142355,142238,142891,142630,143140,142917,142802,142537,142212,142583,142150,142783,142304,142552,142313,142348,142136,142949,143095,142561,142445,143167,142717,142487,142864,142232,143180,142367,142578,143143,142772,143118,142278,142332,142339,142406,326216,4846508,14963996,14964274,14964181,14965713,14966223,14963981,14966195,10627770,11136669,11032893,15516007,15546356,15627009,15581396,15468314,5671079,5671160,8983985,326025,326495,9201736,13139415,13138658,10668192,10668920,10667653,10667042,10667041,5561745,5609470,5528225,5510370,14916395,14879025,14888378,5624401,14886751,5614503,5544411,5583419,5617414,5546449,5587977,5595999,5563914,5627223,5576705,5569377,5611053,5532786,14907395,5611420,5563722,5595007,14913402,5601183,5608084,5550931,5550570,5623842,5545554,5592554,5570544,14895754,5572826,5532897,5540360,5626137,5590793,5577505,5539884,14896912,14917102,5599051,5619545,5608786,5553337,5561792,5567485,14883247,5563166,5607062,5568933,14888117,14879693,5581045,5589031,5541403,5570916,5615914,5576870,233237,11041783,233303,233558,233487,233417,233390,12385019,10885407,10885644,10885761,10885488,10885249,10885281,10885253,10885239,10885272,10885269,10885869,10886285,11143330,11143296,11143716,11143412,11144911,11144264,11143652,11143408,11143838,11144525,12032761,16955,21314,324738,323422,324416,324042,5527214,13187,37339,5677198,5677314,5677204,12365783,186882,185334,8353472,8353220,8353433,8353262,8353430,8353773,8353557,8353826,8353836,10623660,180357,178676,16047141,30531,31656,5555934,5564920,14778590,14777554,14758670,14759283,14778061,14764717,14764232,14780394,14755848,14765561,14763816,14773906,14769396,14758464,14759396,14760609,14762968,14760772,14768216,14757241,14776143,14774946,14780339,14773463,14779510,14780582,14778203,14784636,14769371,14766692,14774793,14764892,14757408,14769696,14780080,14770414,14759430,14765595,14768048,14757966,14759357,14765361,14769191,14763621,14757033,14764604,14761107,14762365,14763419,14782591,14773038,14766277,14773163,14764501,14764228,14780674,14767367,14773980,14759907,14764331,14771520,14764932,14760627,14767100,14762746,14767783,14758845,14776488,14772258,14771299,14756980,14758372,14779656,14756268,14796196,14796886,14796560,14796321,14794934,14795925,14797021,14796450,14796885,10549772,10549761,15690248,9370293,9370148,9370172,16543168,10422868,10424804,10422325,328555,330600,330784,8979966,8979744,233665,233858,12085630,12084990,7796253,7782576,7852508,7854589,7794930,7828320,7796539,7865697,7862688,7873925,7856669,333479,9200,9921655,9914928,14836443,11023386,11024264,11023622,232700,232172,231809,232865,232550,232062,233021,232070,231854,231812,231823,232482,231889,232051,232726,232543,232923,232052,11143535,11143966,11144391,11144091,7603649,12363143,12362932,12363024,12363865,12364053,12362703,13165705,5737551,5737626,5737750,5693011,36819,7452163,209450,207721,209404,209140,208543,207720,208777,209356,207647,207649,207650,207451,10474737,10479611,10482303,10477170,10479425,14669718,14669664,12344051,8989869,4,148642,3867,7,2764,285356,14849548,2768,10012,10013,12372254,12365733,9370197,15,15482544};
            // bioportal中meta数
            metaData.addAll(Arrays.asList(meta));
            subMetaData = metaData;
            predMetaData = metaData;
            objMetaData = metaData;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static ArrayList<Integer> getAlltypes() throws SQLException {
        Statement stmt = db.createStatement();
        String sql = "SELECT COUNT(*) FROM \"types_node\" ";
        ResultSet res = stmt.executeQuery(sql);
        int typesNum = res.getInt("COUNT(*)");
        System.out.println("types num : " + typesNum);
        ArrayList<Integer> types = new ArrayList<>(typesNum);
        res.close();
        stmt.close();
        sql = "SELECT types_id FROM \"types_node\" ";
        res = stmt.executeQuery(sql);
        while (res.next()) {
            types.add(res.getInt("types_id"));
        }
        res.close();
        stmt.close();
        return types;
    }

    private static Map<Integer, Integer> getNodesOfType(Integer typeId) throws SQLException {
        // firstElement = nodeId ;second element = edgeNums of this node , initial with -1 // means uncalculated
        Statement stmt = db.createStatement();
        ResultSet res = stmt.executeQuery("SELECT COUNT(DISTINCT node_id) FROM \"nodes_type\" WHERE type_id =" + typeId.toString());
        int typesNum = res.getInt("COUNT(DISTINCT node_id)");
        Map<Integer, Integer> nodes = new HashMap<>(typesNum);
        res.close();
        stmt.close();
        res = stmt.executeQuery("SELECT DISTINCT node_id FROM \"nodes_type\" WHERE type_id =" + typeId.toString());
        while (res.next()) {
            nodes.put(res.getInt("node_id"), -1);
        }
        res.close();
        stmt.close();
        return nodes;
    }

    private static Set<SeedEdge> getEdgesOfNode(int nodeId,
                                                Map<Integer, Integer> nodes,
                                                Set<SeedEdge> commonEdges) throws SQLException {
        // 1 .get all edges of one node  2.calculate the union set of these edges from different edges
        Set<SeedEdge> edges = new HashSet<>();
        Statement stmt0 = db.createStatement();
        Statement stmt1 = db.createStatement();
        ResultSet res1;
        ResultSet res0 = stmt0.executeQuery("SELECT DISTINCT * FROM \"triples_all\" WHERE subject_id =" + nodeId);
        while (res0.next()) {
            int edgeLabel = res0.getInt("predicate_id");
            if (predMetaData.contains(edgeLabel)) {
                continue;
            }
            int nodeBId = res0.getInt("object_id");
            res1 = stmt1.executeQuery("SELECT DISTINCT type_id FROM \"nodes_type\" WHERE node_id = " + nodeBId);
            Set<Integer> nodeBLabel = new HashSet<>();
            boolean haveType = false;
            while (res1.next()) {
                haveType = true;
                int objLabel = res1.getInt("type_id");
                if (objMetaData.contains(objLabel)) {
                    continue;
                }
                nodeBLabel.add(objLabel);
            }
            res1.close();
            stmt1.close();
            if (!haveType) {
                // 该node为 literal
                res1 = stmt1.executeQuery("SELECT string_type_id FROM \"mapping\" WHERE id =" + nodeBId);
                while (res1.next()) {
                    nodeBLabel.add(-res1.getInt("string_type_id"));
                }
                res1.close();
                stmt1.close();
            }
            if (nodeBLabel.isEmpty()) {
                continue;
            }
            edges.add(new SeedEdge(edgeLabel, nodeBLabel));
        }
        nodes.put(nodeId, edges.size());
        res0.close();
        stmt0.close();
        if (commonEdges == null) {
            // 公共边集为空，当前元素是该类型下计算的第一个元素
            commonEdges = new HashSet<>();
            commonEdges.addAll(edges);
        } else {
            commonEdges.retainAll(edges);
        }
        return commonEdges;
    }

    private static ArrayList<Integer> getIDs(String sql) throws SQLException {
        Statement stmt = db.createStatement();
        ResultSet res = stmt.executeQuery(sql);
        ArrayList<Integer> result = new ArrayList<>();
        while (res.next()) {
            result.add(res.getInt("id"));
        }
        stmt.close();
        res.close();
        return result;
    }

    public static ArrayList<SeedString> calculateSeeds(boolean isSaveToFile, boolean isSaveReadable,
                                                       boolean isSaveCSV, String dataBaseFile) throws Exception {
        ArrayList<Integer> types = getAlltypes();
        System.out.format("Existing %d types\n", types.size());
        types.removeAll(subMetaData);
        System.out.format("Remaining %d types after remove build-in words\n", types.size());
        System.out.println("finish get All types ");
        ArrayList<Seed> seeds = new ArrayList<>(types.size());
        for (int typeId : types) {
            Map<Integer, Integer> nodes = getNodesOfType(typeId);
            System.out.println("finish get Nodes Of Type " + typeId);
            if (nodes.size() < 10) {
                // 若该类型下 节点个数 小于 10 那么不计算 ,不具有代表性
                continue;
            }
            Set<SeedEdge> commonEdges = null;
            for (Integer nodeId : nodes.keySet()) {
                commonEdges = getEdgesOfNode(nodeId, nodes, commonEdges);
            }
            System.out.println("finish cal commonEdges of " + typeId);
            if (commonEdges == null || commonEdges.isEmpty()) {
                continue;
                // 若该类型下 commonEdges个数 小于1 没有公共边 那么不计算 / 不具有代表性
            }

            // 计算 purity
            int nodesNums = nodes.size();
            double purity = 0;
            for (int nodeId : nodes.keySet()) {
                double nodeEdgesNum = nodes.get(nodeId).doubleValue();
                purity += nodeEdgesNum / (commonEdges.size() + nodeEdgesNum);
            }
            purity /= nodesNums;
            purity = (1 - purity) * 2;
            if (((int) purity) == 1 && commonEdges.size() == 1) {
                continue;
                // 若该 根节点 开始的 purity ==1 / 所有实例具有相同的公共边
                // 且 公共边只有一条 那么 为二元关系 不作为种子进行挖掘
            }
            seeds.add(new Seed(typeId, purity, nodesNums, commonEdges));
        }

        Collections.sort(seeds);
        if (isSaveToFile) {
            // 增加jackson 对google guava的支持
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new GuavaModule());

            File seedFile = new File(OUT_PUT_FILE_NAME + ".json");
            if (seedFile.exists()) {
                System.out.println("file already exist");
                throw new Exception("file already exist");
            } else if (seedFile.createNewFile()) {
                mapper.writeValue(seedFile, seeds);
            } else {
                System.out.println("create file failed");
                throw new Exception("create file failed");
            }
        }
        ArrayList<SeedString> seedStrings = new ArrayList<>(seeds.size());
        for (Seed seed : seeds) {
            seedStrings.add(new SeedString(seed, dataBaseFile));
        }
        if (isSaveReadable) {
            // 增加jackson 对google guava的支持
            ObjectMapper mapper = new ObjectMapper();
            mapper.registerModule(new GuavaModule());
            File seedFile = new File("READ_" + OUT_PUT_FILE_NAME + ".json");
            if (seedFile.exists()) {
                System.out.println("file already exist");
                throw new Exception("file already exist");
            } else if (seedFile.createNewFile()) {
                mapper.writeValue(seedFile, seedStrings);
            } else {
                System.out.println("create file failed");
                throw new Exception("create file failed");
            }
            if (isSaveCSV) {
                String CSVfileName = OUT_PUT_FILE_NAME + ".csv";
                File csvFile = new File(CSVfileName);
                csvFile.createNewFile();
                try (BufferedWriter o = new BufferedWriter(new FileWriter(csvFile))) {
                    o.write("TypeId, Content, NodeNums, Purity\n");
                    for (SeedString s : seedStrings) {
                        o.write(s.getTypeId() + ","
                                + s.getContent() + ","
                                + s.getNodeNums() + ","
                                + s.getPurity() + "\n");
                        o.flush();
                    }
                    o.flush();
                } catch (IOException e) {
                    System.out.println(e.getMessage());
                }
            }
        }
        return seedStrings;
    }

    private static List<int[]> generateTriples(int nodeId,
                                               Integer deep,
                                               List<int[]> triples,
                                               Set<Integer> appearedSub,
                                               int maxDeep,
                                               Multimap<Integer, Integer> nodeLabels
    ) throws SQLException {
        // deep controls the deep of recursion ie. the steps when generate triples from one node
        // 使用前 应在函数外 声明一个set<multimap> nodeLabels 用以记录 node 的label
        if (deep > maxDeep) {
            return triples;
        }
        if (triples == null || appearedSub == null) {
            appearedSub = new HashSet<>();
            triples = new ArrayList<>();
        }
        System.out.println("triples.size(): " + triples.size());
        System.out.println("appearedSub.size(): " + appearedSub.size());
        // 查找 第一层节点label label 加入nodeLabels
        Statement stmt = db.createStatement();
        Statement stmt1 = db.createStatement();
        ResultSet res;
        ResultSet res1;
        if (deep.equals(1)) {
            stmt = db.createStatement();
            res = stmt.executeQuery("SELECT type_id FROM \"nodes_type\" WHERE node_id =" + nodeId);
            while (res.next()) {
                nodeLabels.put(nodeId, res.getInt("type_id"));
            }
            res.close();
            stmt.close();
        }
        // 查找 triple List<Integer[]> triples
        res = stmt.executeQuery("SELECT * FROM \"triples_all\" WHERE subject_id =" + nodeId);
        Set<Integer> objects = new HashSet<>();

        while (res.next()) {
            int[] triple = new int[3];
            triple[0] = res.getInt("subject_id");
            triple[1] = res.getInt("predicate_id");
            triple[2] = res.getInt("object_id");
            if (predMetaData.contains(triple[1])) {
                continue;
            }
            Set<Integer> objLabelSet = new HashSet<>();
            res1 = stmt1.executeQuery("SELECT type_id FROM \"nodes_type\" WHERE node_id =" + triple[2]);
            boolean haveType = false;
            while (res1.next()) {
                haveType = true;
                objLabelSet.add(res1.getInt("type_id"));
            }
            res1.close();
            stmt1.close();
            if (!haveType) {
                // 该node为 literal
                res1 = stmt1.executeQuery("SELECT string_type_id FROM \"mapping\" WHERE id =" + triple[2]);
                while (res1.next()) {
                    objLabelSet.add(-res1.getInt("string_type_id"));
                }
            }
            res1.close();
            stmt1.close();
            objLabelSet.removeAll(objMetaData);
            if (objLabelSet.isEmpty()) {
                continue;
            }
            for (int objLabel : objLabelSet) {
                nodeLabels.put(triple[2], objLabel);
            }
            objects.add(triple[2]);
            triples.add(triple);
            appearedSub.add(triple[0]);
        }
        res.close();
        stmt.close();
        for (int object : objects) {
            if (appearedSub.contains(object)) {
                continue;
            }
            generateTriples(object, deep + 1, triples, appearedSub, maxDeep, nodeLabels);
        }
        return triples;
    }

    /**
     * 从给定类型 typeID 下 的所有节点 nodeId ，向外搜索n步 生成同类型相关的子图、
     * 存储 typeId / type下的所有 nodeId / id形式的三元组
     *
     * @param maxDeep
     * @param typeId
     * @return
     * @throws SQLException
     */

    public static void extractTypeRelatedGraph(int maxDeep, int typeId,
                                               String filePath,
                                               int maxNode) throws Exception {

        // typeId 从 Seed 中得到 ，经过metadata 去除
        List<Integer> originNodes = new ArrayList<>(getNodesOfType(typeId).keySet());
        int sampleNum = Math.min(originNodes.size(), maxNode);
        Random random = new Random();
        Set<Integer> nodeIndexes = new HashSet<>(sampleNum);
        for (int i = 0; i < sampleNum; i++) {
            int nextNodeIndex = random.nextInt(originNodes.size() - 1);
            while (nodeIndexes.contains(nextNodeIndex)) {
                nextNodeIndex = (nextNodeIndex + 1) % sampleNum;
            }
            nodeIndexes.add(nextNodeIndex);
        }
        Set<Integer> nodes = new HashSet<>(sampleNum);
        for (int index : nodeIndexes) {
            nodes.add(originNodes.get(index));
        }
        List<int[]> triples = new ArrayList<>();
        Set<Integer> appearedNodes = null;
        Multimap<Integer, Integer> nodeLabels = TreeMultimap.create();
        for (int nodeId : nodes) {
            // 使用前 应在函数外 声明一个set<multimap> nodeLabels 用以记录 node 的label
            triples.addAll(generateTriples(nodeId, 1, triples, appearedNodes, maxDeep, nodeLabels));
        }

        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new GuavaModule());
        // 增加jackson 对google guava的支持
        File resultFile = new File(filePath);
        if (resultFile.createNewFile()) {
            mapper.writeValue(resultFile, new TypeRelatedGraph(typeId, nodes, triples, maxDeep, nodeLabels));
        } else {
            System.out.println("file already exist");
            throw new Exception("file already exist");
        }
    }

    public static void main(String[] args) throws Exception {
        //ArrayList<SeedString> seeds = calculateSeeds(true, true,
        //        true, DATA_BASE_PATH);
        int maxNode = 50;
        int maxDeep = 5;
/*        for (SeedString seed : seeds) {
            String filePath = "D_" + maxDeep + "P_" + seed.getPurity() + "R_" + maxNode + "T_" + seed.getTypeId() + ".json";
            SeedsCalculator.extractTypeRelatedGraph(maxDeep, seed.getTypeId(), filePath, maxNode);
            System.out.println("ExtractTypeRelatedGraph Finished");
        }*/
        String filePath = "D_" + maxDeep + "P_" + 10156 + "R_" + maxNode + "T_" + 10156 + ".json";
        SeedsCalculator.extractTypeRelatedGraph(maxDeep, 10156, filePath, maxNode);
        db.close();
    }
}


